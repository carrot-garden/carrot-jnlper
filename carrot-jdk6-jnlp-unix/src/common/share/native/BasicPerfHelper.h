/*
 * @(#)BasicPerfHelper.h	1.2 10/03/24
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
#ifndef _BASIC_PERF_HELPER_H_
#define _BASIC_PERF_HELPER_H_

#include "jni.h"
#include "BasicPerfStore.h"
#include "PerfHelper.h"
#include "NativeLock.h"
#include "NativeLocker.h"
#include "PerfLib.h"
#include "SystemTime.h"


class PERFLIB_API BasicPerfHelper : public PerfHelper {

public:
    ////////////////////////////////////////////////////////////////////////////
    // Gets the current system time in milliseconds.  The time is given as a
    // 64-bit signed integer that represents the number of milliseconds since
    // the start of the Java epoch (i.e. since Midnight, January 1st, 1970).
    //
    // Override this method to provide a platform specific implementation.  The
    // subclass should implement the method in a maner that is equivalent to the
    // functionality the JVM provides for the java.lang.System.currentTimeMillis
    // method.
    //
    // @return the current system time in milliseconds.
    //
    virtual jlong getCurrentTime(void) const {
        return (m_clock.getCurrentTime());
    }


    ////////////////////////////////////////////////////////////////////////////
    // Writes a time stamped label entry in the local storage buffer.  The time
    // stamp is automatically generated by this call.
    //
    // @param  label  the label to write.
    //
    virtual void put(const char * label) {
        if (m_pStore != NULL) {
            m_pStore->put(label);
        }
    }


    ////////////////////////////////////////////////////////////////////////////
    // Puts a time stamped label entry in the local storage buffer using a Java
    // string as the source.  The time stamp is automatically generated by this call.
    //
    // @param  pEnv    a pointer to the Java environment that's making the request.
    // @param  jLabel  the label to write.
    //
    virtual void put(JNIEnv * pEnv, jstring jLabel) {
        if (m_pStore != NULL) {
            m_pStore->put(pEnv, jLabel);
        }
    }


    ////////////////////////////////////////////////////////////////////////////
    // Gets the contents of the label storage as an array of Java objects.
    //
    // This is a helper function for converting the local native PerfLabel
    // storage into a Java array.
    //
    // @param  pEnv  a pointer to the Java environment that's making the request.
    //
    // @returns the contents of the label storage as an array of Java objects.
    //
    virtual jobjectArray toArray(JNIEnv * pEnv) const {
        jobjectArray result = NULL;

        if (m_pStore != NULL) {
            result = m_pStore->toArray(pEnv);
        }

        if (result == NULL) {
            // ask the base class for a zero sized array
            result = PerfHelper::toArray(pEnv);
        }

        return (result);
    }


    ////////////////////////////////////////////////////////////////////////////
    // Initializes the local storage.  This initialization can't be done during
    // the constructor since it isn't know at that time if local storage is
    // required or not.
    //
    virtual bool initStore(void) {
        NativeLocker lock(&m_sync);
        bool         result = true;

        if (m_pStore == NULL) {
            m_pStore = new BasicPerfStore(m_clock, m_sync);
            result   = (m_pStore != NULL);
        }

        return (result);
    }


    ////////////////////////////////////////////////////////////////////////////
    // Constructor for a BasicPerfHelper.
    //
    // @param  clock  a reference to the system clock.
    // @param  sync   a reference to a lock to sync access to the store.
    //
    BasicPerfHelper(const SystemTime & clock,
                    NativeLock       & sync)
        : m_clock(clock),
          m_sync(sync),
          m_pStore(NULL) {
        // everything done in init
    }

    ////////////////////////////////////////////////////////////////////////////
    // Destroy this BasicPerfHelper by making sure that any local store is
    // deleted.
    //
    virtual ~BasicPerfHelper() {
        if (m_pStore != NULL) {
            delete (m_pStore);
            m_pStore = NULL;
        }
    }

private:
    const SystemTime & m_clock;
    NativeLock       & m_sync;
    BasicPerfStore   * m_pStore;
};

#endif    // _BASIC_PERF_HELPER_H_
