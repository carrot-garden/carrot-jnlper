/*
 * @(#)BasicPerfStore.cpp	1.2 10/03/24
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

#include "BasicPerfStore.h"
#include "com_sun_deploy_perf_NativePerfHelper.h"


////////////////////////////////////////////////////////////////////////////
// Puts a time stamped label entry in the local storage buffer using a Java
// string as the source.  The time stamp is automatically generated by this call.
//
// @param  jLabel  the label to write.
//
void BasicPerfStore::put(JNIEnv * pEnv, jstring jLabel) {
    const char * label = pEnv->GetStringUTFChars(jLabel, NULL);

    if (label != NULL) {
        put(label);
        pEnv->ReleaseStringUTFChars(jLabel, label);
    }
}


////////////////////////////////////////////////////////////////////////////
// Gets the contents of the label storage as an array of Java objects.
//
// This is a helper function for converting the local native PerfLabel
// storage into a Java array.
//
// @returns the contents of the label storage as an array of Java objects.
//
jobjectArray BasicPerfStore::toArray(JNIEnv * pEnv) const {
    jclass       clazz  = pEnv->FindClass("com/sun/deploy/perf/PerfLabel");
    jobjectArray result = NULL;

    if (clazz != NULL) {
        // need to cheat to get non-const access to the sync object
        BasicPerfStore * thisun = const_cast<BasicPerfStore *>(this);
        NativeLocker     lock(&(thisun->m_sync));

        size_t count = size();

        result = pEnv->NewObjectArray((jsize) count, clazz, NULL);
        if (result != NULL) {
            try {
                for (size_t i = 0; i < count; i++) {
                    pEnv->SetObjectArrayElement(result, (jsize) i,
                                                get(i).getJavaObj(pEnv));
                }
            }
            catch (PerfStore::OutOfBounds) {
                // shouldn't happen
            }
        }
    }

    return (result);
}
