/*
 * @(#)PerfHelper.h	1.2 10/03/24
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
#ifndef _PERF_HELPER_H_
#define _PERF_HELPER_H_

#include "jni.h"
#include "DeployPerf.h"
#include "PerfLib.h"


extern "C" {
    ////////////////////////////////////////////////////////////////////////////
    // Puts a Java String into the native label storage.
    //
    // This is a helper function that goes between the JNI function and the
    // PerfHelper object.
    //
    // @param  pEnv    a pointer to the Java environment that's making the request.
    // @param  jLabel  the label to put.
    //
    void JNI_put(JNIEnv * pEnv, jstring jLabel);


    ////////////////////////////////////////////////////////////////////////////
    // Gets the contents of the label storage as an array of Java objects.
    //
    // This is a helper function that goes between the JNI function and the
    // PerfHelper object.
    //
    // @param  pEnv  a pointer to the Java environment that's making the request.
    //
    // @returns the contents of the label storage as an array of Java objects,
    //          or a zero sized array if the storage is empty.
    //
    jobjectArray JNI_toArray(JNIEnv * pEnv);
} // End extern "C"


class PERFLIB_API PerfHelper : public DeployPerf {

public:
    ////////////////////////////////////////////////////////////////////////////
    // Abstract class should always have virtual destructor defined.
    //
    virtual ~PerfHelper() {};


protected:
    ////////////////////////////////////////////////////////////////////////////
    // Puts a time stamped label entry in the local storage buffer using a Java
    // string as the source.  The time stamp is automatically generated by this call.
    //
    // @param  pEnv    a pointer to the Java environment that's making the request.
    // @param  jLabel  the label to put.
    //
    virtual void put(JNIEnv * pEnv, jstring jLabel) {
        // The base class handles the case where there is no storeage
        // implementation, so it does nothing.  Classes that implement the rest
        // of the perf/helper interface should override this method to put a
        // Java PerfLabel into the local storage.
    }

    ////////////////////////////////////////////////////////////////////////////
    // Gets the contents of the label storage as an array of Java objects.
    //
    // @param  pEnv  a pointer to the Java environment that's making the request.
    //
    // @returns the contents of the label storage as an array of Java objects.
    //
    virtual jobjectArray toArray(JNIEnv * pEnv) const {
        // The base class handles the case where there is no storeage
        // implementation, so it does nothing.  Classes that implement the rest
        // of the perf/helper interface should override this method to return
        // a Java array of PerfLabel containing the the local storage.
        //
        // Note: the JNI_toArray function handles converting a NULL return value
        //       into a zero sized array.
        return (NULL);
    }


private:
    ////////////////////////////////////////////////////////////////////////////
    // Make some friends the JNI methods can use to access private members.
    //
    friend jobjectArray JNI_toArray(JNIEnv * pEnv);
    friend void JNI_put(JNIEnv * pEnv, jstring jLabel);
};

#endif    // _PERF_HELPER_H_
