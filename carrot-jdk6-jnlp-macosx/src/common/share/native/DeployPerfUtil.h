/*
 * @(#)DeployPerfUtil.h	1.2 10/03/24
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
#ifndef _DEPLOY_PERF_UTIL_H_
#define _DEPLOY_PERF_UTIL_H_

#include "DeployPerf.h"

class DeployPerfUtil {

public:

    ////////////////////////////////////////////////////////////////////////////
    // An enumerated type to describe the states that control access to the
    // Deploy performance logging API.  The states are as follows:
    //
    //     unloaded - the library for the API is not yet loaded by the system.
    //
    //     loaded - the library is loaded, allowing minimal access to the API
    //              to get timing data. (State after a successful load, before
    //              any attempt has been made to initialize logging.)
    //
    //     initialized - the API is currently enabled by the user, and logging
    //                   is initialized.
    //
    //     disabled - the full API that allows logging is disabled by the user,
    //                but the timing API is still available. (State after a 
    //                successful load; an attempted initialization was performed
    //                and it was determined the user has disabled logging.)
    //
    //     error - the library could not be loaded by the system.
    //
    enum state {
        unloaded,
        loaded,
        initialized,
        disabled,
        error
    };

    ////////////////////////////////////////////////////////////////////////////
    // Gets the current system time in milliseconds.  The time is given as a
    // 64-bit signed integer that represents the number of milliseconds since
    // the start of the Java epoch (i.e. since Midnight, January 1st, 1970).
    //
    // This method returns 0 if the static class has not been successfully
    // initialized.
    //
    // @return the current system time in milliseconds.
    //
    static jlong getCurrentTime(void) {
        jlong result = 0;

        switch (m_state) {
            case loaded:
            case initialized:
            case disabled:
                // should be most common states, will get the time from the
                // loaded DeployPerf object
                result = m_deployPerf->getCurrentTime();
                break;

            case unloaded:
                // should only happen once, will prep the library then 
                // recursively call itself
                prepDeployPerf();
                result = getCurrentTime();
                break;

            default:
                // return 0 for all other states
                break;
        }

        return (result);
    }


    ////////////////////////////////////////////////////////////////////////////
    // Writes a time stamped label entry in the local storage buffer.  the time
    // stamp is automatically generated by this call.
    //
    // @param  label  the label to write.
    //
    static void put(const char * label) {
        switch (m_state) {
            case initialized:
                // should be most common state, will use the loaded DeployPerf
                // object to put the label in the log
                m_deployPerf->put(label);
                break;

            case unloaded:
                // should only happen once, will prep the library then 
                // recursively call itself
                prepDeployPerf();
                put(label);
                break;

            case loaded:
                // should only happen once, will init the log then
                // recursively call itself
                initLogging();
                put(label);
                break;

            // all other states are silently ignored
        }
    }

    static state getState(void) {
        return (m_state);
    }


    ////////////////////////////////////////////////////////////////////////////
    // Checks if the user has set the DEPLOY_PERF_ENABLED environment variable.
    // If this variable is set in the environment to any value other than "false",
    // then this method will return true.
    //
    // @return true if logging is enabled by user; false otherwise.
    //
    static bool isEnabled(void);


private:
    ////////////////////////////////////////////////////////////////////////////
    // Performs the initial preperation steps for the Deploy performance API.
    // This attempts to load the library associated with the API if it is not
    // already loaded, or in an error state.
    //
    // @return the current state of the Deploy performance API.
    //
    static state prepDeployPerf(void);


    ////////////////////////////////////////////////////////////////////////////
    // Determines whether or not the user has enabled the Deploy performance
    // logging features of the API.  If enabled (and the API isn't in the error
    // state) this function will initialize the log store of the DeployPerf
    // object.
    //
    // @return the current state of the Deploy performance API.
    //
    static state initLogging(void);


    ////////////////////////////////////////////////////////////////////////////
    // This method attempts to load the library that contains the Deploy
    // performance API.  If it successfully loads the library it will attempt
    // to load the address of the GetDeployPerf function.  If that succeeds it
    // will invoke the function to get the address of the DeployPerf object.
    //
    // @return DeployPerf object if successful; otherwise NULL.
    //
    static DeployPerf * loadLibFuncs(void);


    ////////////////////////////////////////////////////////////////////////////
    // Gets the path to the library that contains the Deploy performance API.
    //
    // @return true if successful; false otherwise.
    //
    static bool getPath(TCHAR * path);

    static state        m_state;
    static DeployPerf * m_deployPerf;
};

#endif    // _DEPLOY_PERF_UTIL_H_
